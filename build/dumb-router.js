(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var DescriptorPart = function DescriptorPart(partString, position) {
  var self = {};

  self.matches = function (path) {
    if (self.isDynamic()) {
      var pathValue = self.getPathValue(path);
      return pathValue !== undefined && pathValue.length > 0;
    } else {
      return self.getPathValue(path) === partString;
    }
  };

  self.isDynamic = function () {
    return partString.startsWith(':');
  };

  self.paramName = function () {
    if (self.isDynamic()) {
      return partString.split(':')[1];
    }
  };

  self.getPathValue = function (path) {
    return path.split('/')[position];
  };

  return self;
};

module.exports = DescriptorPart;

},{}],2:[function(require,module,exports){
'use strict';

var PathMatcher = require('./path_matcher');

var Router = function Router() {
  var router = {};
  var routes = [];

  router.register = function (pathDescriptor, handler, subroutes) {
    routes.push(Router.Route(pathDescriptor, handler, subroutes));
  };

  router.execute = function (path) {
    var matchingRoute = routeFor(path);
    if (matchingRoute) {
      matchingRoute.execute(path);
    }
  };

  router.path = function () {
    for (var _len = arguments.length, pathParts = Array(_len), _key = 0; _key < _len; _key++) {
      pathParts[_key] = arguments[_key];
    }

    pathParts.unshift('');
    var path = pathParts.join('/');
    if (routeFor(path) === undefined) {
      throw new Error('No route for "' + path + '"');
    }
    return path;
  };

  return router;

  function routeFor(path) {
    return routes.find(function (route) {
      return route.matches(path);
    });
  }
};

Router.Route = function (pathDescriptor, handler, setupSubroutes) {
  var self = {};
  var pathMatcher = PathMatcher(pathDescriptor);

  var subRouter;
  if (setupSubroutes) {
    subRouter = Router();
    setupSubroutes(subRouter);
  }

  self.matches = function (path) {
    if (isScopingRoute()) {
      return pathMatcher.matches(path) && pathMatcher.remainder(path).length > 0;
    } else {
      return pathMatcher.matches(path);
    }
  };

  self.execute = function (path) {
    if (self.matches(path)) {
      if (!isScopingRoute()) {
        handler(path, pathMatcher.params(path));
      }
      if (subRouter) {
        subRouter.execute(pathMatcher.remainder(path));
      }
    }
  };

  return self;

  function isScopingRoute() {
    return handler === null || handler === undefined;
  }
};

module.exports = Router;

},{"./path_matcher":3}],3:[function(require,module,exports){
'use strict';

var DescriptorPart = require('./descriptor_part');

var PathMatcher = function PathMatcher(pathDescriptor) {
  var pathMatcher = {};
  var pathDescriptorParts = pathDescriptor.split('/').map(DescriptorPart);

  pathMatcher.matches = function (path) {
    return pathDescriptorParts.every(function (descriptorPart) {
      return descriptorPart.matches(path);
    });
  };

  pathMatcher.params = function (path) {
    var params = {};
    pathDescriptorParts.forEach(function (descriptorPart, i) {
      if (descriptorPart.isDynamic()) {
        params[descriptorPart.paramName()] = descriptorPart.getPathValue(path);
      }
    });
    return params;
  };

  pathMatcher.remainder = function (path) {
    var pathParts = path.split('/');
    pathParts.splice(0, pathDescriptorParts.length);
    pathParts.unshift('');
    return pathParts.join('/');
  };

  return pathMatcher;
};

module.exports = PathMatcher;

},{"./descriptor_part":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
